// Generated by CoffeeScript 1.10.0
(function() {
  var app;

  app = angular.module('gopherCoffee', []);

  app.controller('gopherControl', [
    '$scope', '$http', function($scope, $http) {
      console.log("INITIATING GOPHER CONTROL");
      $scope.greeting = 'Gopher airtime : Recharges';
      $scope.recharges;
      $scope.searchResults = [];
      $scope.fetchStatus = false;
      $scope.newRecharge = false;
      $scope.new_msisdn;
      $scope.new_amount;
      $scope.new_network;
      $scope.shownewbtn = true;
      $scope.error = false;
      $scope.searchtext;
      $scope.fetchRecharges = function() {
        var config;
        console.log('fetching recharges');
        config = {
          method: "GET",
          url: "/api/v1/recharges/",
          headers: {
            Authorization: 'Token bd2b2e23762b43b8f86ed4e4d1137d87000a5fc4'
          }
        };
        return $http(config).success(function(data) {
          $scope.recharges = data;
          console.log("feteched");
          console.log($scope.recharges);
          return $scope.fetchStatus = true;
        }).error(function() {
          return alert("Error failure!");
        });
      };
      $scope.resubmitRecharge = function(recharge) {
        var config;
        console.log('resubmit recharge');
        config = {
          method: 'PATCH',
          data: {
            id: recharge.id,
            msisdn: recharge.msisdn,
            amount: recharge.amount,
            reference: '',
            hotsocket_ref: 0,
            status_message: '',
            network_code: recharge.network_code
          },
          url: '/api/v1/recharges/' + recharge.id + '/',
          headers: {
            Authorization: 'Token bd2b2e23762b43b8f86ed4e4d1137d87000a5fc4'
          }
        };
        return $http(config).success(function(data) {
          $scope.recharges = data;
          $scope.fetchRecharges();
          return console.log("Success !");
        }).error()(function() {
          return alert("Error failure!");
        });
      };
      $scope.deleteRecharge = function(recharge) {
        var config;
        console.log('deleting recharges');
        config = {
          method: 'DELETE',
          data: {
            id: recharge.id
          },
          url: '/api/v1/recharges/' + recharge.id + '/',
          headers: {
            Authorization: 'Token bd2b2e23762b43b8f86ed4e4d1137d87000a5fc4'
          }
        };
        return $http(config).success(function(data) {
          $scope.recharges = data;
          $scope.fetchRecharges();
          return console.log("Success !");
        }).error()(function() {
          return alert("Error failure!");
        });
      };
      $scope.submitNew = function() {
        var config, data;
        data = {
          msisdn: $scope.new_msisdn,
          amount: $scope.new_amount,
          network_code: $scope.new_network
        };
        config = {
          method: 'POST',
          data: data,
          url: '/api/v1/recharges/',
          headers: {
            Authorization: 'Token bd2b2e23762b43b8f86ed4e4d1137d87000a5fc4'
          }
        };
        console.log(config);
        return $http(config).success(function(data) {
          $scope.fetchRecharges();
          return $scope.newRecharge = !$scope.newRecharge;
        }).error(function(err) {
          $scope.error = err;
          return console.log(err);
        });
      };
      $scope.search = function(query) {
        $scope.searchResults = [];
        if ($scope.fetchStatus) {
          if ($scope.searchtext === '') {
            $scope.refresh();
          }
          $scope.recharges.forEach(function(recharge) {
            var contains, option, value;
            contains = null;
            for (option in recharge) {
              value = recharge[option];
              if (option === '$$hashKey' || option === 'url') {
                continue;
              } else if (isNaN(value)) {
                contains = value.toLowerCase().indexOf(query.toLowerCase()) !== -1;
                if (contains) {
                  break;
                }
              } else {
                if (value !== null) {
                  contains = value.toString().toLowerCase().indexOf(query.toLowerCase()) !== -1;
                  if (contains) {
                    break;
                  }
                }
              }
            }
            if (contains) {
              return $scope.searchResults.push(recharge);
            }
          });
        }
        $scope.recharges = $scope.searchResults;
        return $scope.searchResults = [];
      };
      return $scope.refresh = function() {
        return $scope.fetchRecharges();
      };
    }
  ]);

}).call(this);
